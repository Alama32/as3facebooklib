<?xml version="1.0" encoding="utf-8"?>

<!--
Adobe Systems Incorporated(r) Source Code License Agreement
Copyright(c) 2005 Adobe Systems Incorporated. All rights reserved.
	
Please read this Source Code License Agreement carefully before using
the source code.
	
Adobe Systems Incorporated grants to you a perpetual, worldwide, non-exclusive,
no-charge, royalty-free, irrevocable copyright license, to reproduce,
prepare derivative works of, publicly display, publicly perform, and
distribute this source code and such derivative works in source or
object code form without any attribution requirements.
	
The name "Adobe Systems Incorporated" must not be used to endorse or promote products
derived from the source code without prior written permission.
	
You agree to indemnify, hold harmless and defend Adobe Systems Incorporated from and
against any loss, damage, claims or lawsuits, including attorney's
fees that arise or result from your use or distribution of the source
code.
	
THIS SOURCE CODE IS PROVIDED "AS IS" AND "WITH ALL FAULTS", WITHOUT
ANY TECHNICAL SUPPORT OR ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING,
BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ALSO, THERE IS NO WARRANTY OF
NON-INFRINGEMENT, TITLE OR QUIET ENJOYMENT. IN NO EVENT SHALL MACROMEDIA
OR ITS SUPPLIERS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOURCE CODE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*"
	creationComplete="initApp();">

	<mx:Script>
		<![CDATA[
		
			import com.adobe.webapis.facebook.*;
			import com.adobe.webapis.facebook.events.FacebookResultEvent;
			
			//import mx.events.AlertClickEvent;
			import mx.controls.Alert;
			import mx.utils.ObjectUtil;
			import flash.net.*;
			import flash.geom.Rectangle;
		
			private var service:FacebookService;
			
			[Bindable]
			private var dgData:Array; // source for datagrid
			
			/**
			 * Initialize the application by creating a new instance of
			 * the Facebook api with our application's api key
			 */
			public function initApp():void
			{
				viewStack.selectedChild = welcomePanel;

				// Check to see if the auth token was stored, and if so
				// check the token to see if a user is logged in and what
				// kind of permission they have
				var facebookCookie:SharedObject = SharedObject.getLocal( "FacebookServiceTest" );
				
				if ( facebookCookie.data.session_key ) {
					debug.text += "Found stored auth token.. trying to auto-login\n";

					// Assign the token and permission to the service so that
					// all calls that require authentication have their values
					// populated
					service = new FacebookService( facebookCookie.data.api_key );
					service.session_key = facebookCookie.data.session_key;
					service.secret = facebookCookie.data.secret;
					
					viewStack.selectedChild = sessionPanel;

				}
			}
			
			/**
			 * All methods require authentication except createToken and getSession, 
			 * so this is how you would start the login sequence.  We need to set the secret
			 * assigned to our particular application, and then get
			 * a auth_token used for authentication.
			 */
			public function startLoginSequence():void
			{
				var api_key:String = apiKeyTextInput.text;
				service = new FacebookService( api_key );
				service.secret = secretTextInput.text;
				
				service.addEventListener( FacebookResultEvent.AUTH_CREATE_TOKEN, createTokenResponse );
				service.auth.createToken();
			}
			
			/**
			 * When we receive the auth_token, we need to construct a login link
			 * and open a browser window for the user to log into the facebook
			 * site.  Use the service getLoginURL method to construct a 
			 * login link with the frob we received, and pass along the
			 * permission we'd like to be granted from the user.
			 */
			private function createTokenResponse( event:FacebookResultEvent ):void {
				debug.text += "createTokenResponse: success = " + event.success + "\n";
				
				if ( event.success ) {
					// Have the service construct a login url for us with the
					// authentication token
					var auth_token:String = String( event.data );
					
					var auth_url:String = service.getLoginURL( auth_token );
					
					debug.text += auth_url + "\n";
					
					// Open a new browser window to authenticate the user
					// and grant our application permission
					navigateToURL( new URLRequest( auth_url ), "_blank" );
										
					// Show the alert saying  they need to authenticate on the 
					// facebook site.  when the alert closes, we need to get the 
					// token then to get their logged-in status
					Alert.show( "This application requires that you authenticate"
								+ " on Facebook.com before proceeding.  Please log in"
								+ " to Facebook in the separate browser window that"
								+ " opened.  After you have successfully logged in,"
								+ " press 'OK' below to continue",
								"Authentication Required",
								Alert.OK | Alert.CANCEL,
								null,
								onCloseAuthWindow );
								
				} else {
					debug.text += "error code: " + event.data.errorCode + "\n";
					debug.text += "error message: " + event.data.errorMessage + "\n";
				}
			}
			
			/**
			 * After the alert closes, if they pressed the OK button we
			 * assume that they logged into Facebook, so try to get their
			 * auth token that we can use throughout the rest of our app
			 */
			private function onCloseAuthWindow( event:* ):void {
				
				// Only process if they pressed OK
				if ( event.detail == Alert.OK ) {
					// Get their authentication token, and call getTokenResponse
					// when it's available
					viewStack.selectedChild = authTokenPanel;
				}
			}
			
			/**
			 * After the alert closes, if they pressed the OK button we
			 * assume that they logged into Facebook, so try to get their
			 * auth token that we can use throughout the rest of our app
			 */
			private function getSession( ):void {
				
				// Get their authentication token, and call getTokenResponse
				// when it's available
				service.addEventListener( FacebookResultEvent.AUTH_GET_SESSION, getSessionResponse );
				service.auth.getSession( authTokenTextInput.text );
			}
			
			/**
			 * This completes the login process.  When the user is successfully
			 * authenticated and the application has permission to use their
			 * data, there will be a token that facebook assigns to us.
			 */
			private function getSessionResponse( event:FacebookResultEvent ):void {
				debug.text += "getSessionResponse: success = " + event.success + "\n";
				
				if ( event.success ) {

					var authSession:AuthSession = AuthSession( event.data );
					
					// Assign the token and permission to the service so that
					// all calls that require authentication have their values
					// populated
					service.session_key = authSession.session_key;
					service.secret = authSession.secret;
					
					// Save the token in a shared object so that when the application
					// loads again we can re-authenticate automatically
					var facebookCookie:SharedObject = SharedObject.getLocal( "FacebookServiceTest" );
					facebookCookie.data.api_key = service.api_key;
					facebookCookie.data.session_key = service.session_key;
					facebookCookie.data.secret = service.secret;
					facebookCookie.flush();
					
					viewStack.selectedChild = sessionPanel;

					// Update the UI to show the currently logged in username
					//username.text = authSession.uid;
					//permission.text = service.permission;
					
					//debug.text += "uid: " + authSession.uid + "\n";
					//debug.text += "expires: " + authSession.expires + "\n";
					//debug.text += "secret: " + authSession.secret + "\n";
					//debug.text += "session_key: " + authSession.session_key + "\n";
					
					// Toggle the login/logout buttons
					//login.visible = false;
					//logout.visible = true;
					
				} else {
					debug.text += "error code: " + event.data.errorCode + "\n";
					debug.text += "error message: " + event.data.errorMessage + "\n";
				}
			}
			
			/**
			 * Calls the appropriate Facebook method based on the selection
			 * in the method combobox
			 */
			private function invokeFacebookMethod():void {
				switch ( method.selectedLabel ) {
					
					case "facebook.fbml.refreshImgSrc":
						//service.addEventListener( FacebookResultEvent.FBML_REFRESH_IMG_SRC, genericResponseHandler );
						//service.fbml.refreshImgSrc( url:String );
						break;

					case "facebook.fbml.refreshRefUrl":
						//service.addEventListener( FacebookResultEvent.FBML_REFRESH_REF_URL, genericResponseHandler );
						//service.fbml.refreshRefUrl( url:String );
						break;

					case "facebook.fbml.setRefHandle":
						//service.addEventListener( FacebookResultEvent.FBML_SET_REF_HANDLE, genericResponseHandler );
						//service.fbml.setRefHandle();
						break;

					case "facebook.feed.publishStoryToUser":
						//service.addEventListener( FacebookResultEvent.FEED_PUBLISH_STORY_TO_USER, genericResponseHandler );
						//service.feed.publishStoryToUser();
						break;

					case "facebook.feed.publishActionOfUser":
						//service.addEventListener( FacebookResultEvent.FEED_PUBLISH_ACTION_OF_USER, genericResponseHandler );
						//service.feed.publishActionOfUser();
						break;

					case "facebook.fql.query":
						//service.addEventListener( FacebookResultEvent.FQL_QUERY, genericResponseHandler );
						//service.fql.query();
						break;

					case "facebook.friends.areFriends":
						//service.addEventListener( FacebookResultEvent.FRIENDS_ARE_FRIENDS, genericResponseHandler );
						//service.friends.areFriends(uid1,uid2);
						break;

					case "facebook.friends.get":
						service.addEventListener( FacebookResultEvent.FRIENDS_GET, genericResponseHandler );
						service.friends.get();
						break;

					case "facebook.friends.getAppUsers":
						service.addEventListener( FacebookResultEvent.FRIENDS_GET_APP_USERS, genericResponseHandler );
						service.friends.getAppUsers();
						break;

					case "facebook.notifications.get":
						service.addEventListener( FacebookResultEvent.NOTIFICATIONS_GET, genericResponseHandler );
						service.notifications.get();
						break;

					case "facebook.notifications.send":
						//service.addEventListener( FacebookResultEvent.NOTIFICATIONS_SEND, genericResponseHandler );
						//service.notifications.send(to_ids:Array, notification:String, email:String = "");
						break;

					case "facebook.notifications.sendRequest":
						//service.addEventListener( FacebookResultEvent.NOTIFICATIONS_SEND_REQUEST, genericResponseHandler );
						//service.notifications.sendRequest(to_ids:Array, type:String, content:String, image:String, invite:Boolean = false);
						break;

					case "facebook.profile.setFBML":
						//service.addEventListener( FacebookResultEvent.PROFILE_SET_FBML, genericResponseHandler );
						//service.profile.getInfo(markup:String, uid:int = -1);
						break;

					case "facebook.profile.getFBML":
						service.addEventListener( FacebookResultEvent.PROFILE_GET_FBML, genericResponseHandler );
						service.profile.getFBML();
						break;

					case "facebook.users.getInfo":
						service.addEventListener( FacebookResultEvent.USERS_GET_INFO, genericResponseHandler );
						//service.users.getInfo(uids:Array, fields:Array);
						service.users.getInfo(["683505234"],["about_me","activities","affiliations","birthday","books","current_location","city","country","state","zip","education_history","first_name","has_added_app","hometown_location","city","country","state","zip","hs_info","grad_year","hs1_key","hs1_name","hs2_key","hs2_name","interests","is_app_user","last_name","meeting_for","meeting_sex","movies","music","name","notes_count","pic","pic_big","pic_small","pic_square","political","profile_update_time","quotes","relationship_status","religion","sex","significant_other_id","status","timezone","tv","uid","wall_count","work_history"]);
						break;

					case "facebook.users.getLoggedInUser":
						service.addEventListener( FacebookResultEvent.USERS_GET_LOGGED_IN_USER, genericResponseHandler );
						service.users.getLoggedInUser();
						break;

					case "facebook.events.get":
						service.addEventListener( FacebookResultEvent.EVENTS_GET, genericResponseHandler );
						//service.events.get(uid:int = -1, eids:Array = null, start_time:Date = null, end_time:Date = null, rsvp_status:String = "");
						service.events.get();
						break;

					case "facebook.events.getMembers":
						//service.addEventListener( FacebookResultEvent.EVENTS_GET_MEMBERS, genericResponseHandler );
						//service.events.getMembers(eid:int);
						break;

					case "facebook.groups.get":
						service.addEventListener( FacebookResultEvent.GROUPS_GET, genericResponseHandler );
						service.groups.get();
						//service.groups.get(uid:int = -1, gids:Array = null);
						break;

					case "facebook.groups.getMembers":
						//service.addEventListener( FacebookResultEvent.GROUPS_GET_MEMBERS, genericResponseHandler );
						//service.groups.getMembers(gid:int);
						break;

					case "facebook.photos.addTag":
						//service.addEventListener( FacebookResultEvent.PHOTOS_ADD_TAG, genericResponseHandler );
						//service.photos.addTag(pid:int, tag_uid:int, tag_text:String, x:Number, y:Number, tags:String);
						break;

					case "facebook.photos.createAlbum":
						//service.addEventListener( FacebookResultEvent.PHOTOS_CREATE_ALBUM, genericResponseHandler );
						//service.photos.createAlbum(name:String, location:String = "", description:String = "");
						break;

					case "facebook.photos.get":
						service.addEventListener( FacebookResultEvent.PHOTOS_GET, genericResponseHandler );
						//service.photos.get(subj_id:int = -1, aid:int = -1, pids:Array = null);
						service.photos.get();
						break;

					case "facebook.photos.getAlbums":
						//service.addEventListener( FacebookResultEvent.PHOTOS_GET_ALBUMS, genericResponseHandler );
						//service.photos.getAlbums(uid:int, pids:Array);
						break;

					case "facebook.photos.getTags":
						//service.addEventListener( FacebookResultEvent.PHOTOS_GET_TAGS, genericResponseHandler );
						//service.photos.getTags(pids:Array);
						break;
		
				}
			}
			
			/**
			 * Generically handle the response to a facebook method call - just output
			 * the information in the event to the screen.
			 */
			private function genericResponseHandler( event:FacebookResultEvent ):void {
				debug.text += event.type +  " success = " + event.success + "\n";
				
				if ( event.success ) {
					
					// The call was successful, just dump out the data objectr
					debug.text += ObjectUtil.toString( event.data ) + "\n";
					
					if (event.data is Array) {
						// The response was an Array of objects so lets push
						// them into the datagrid dataprovider
						dgData = event.data as Array;
					}
					
				} else {
					// Encountered some kind of error on Facebook...
					var e:FacebookError = FacebookError( event.data );
					
					debug.text += "error code: " + e.errorCode + "\n";
					debug.text += "error message: " + e.errorMessage + "\n";
				}
			}
			
			/**
			 * When the user selects a file to upload, this handles the upload
			 */
			private function onUploadPhotoSelect( event:flash.events.Event ):void {
				/* Upload doesn't work - need some player modifications first */
				//service.photos.upload.upload( FileReference( event.target ), "test", "dest descr", "testtag" );
			}
			
			/**
			 * Logout the user from the application and update the display
			 */
			private function processLogout():void {
						
				// Configure the service so it looks like the user
				// is logged out
				service.session_key = "";
				
				// Update the UI to reflect the user being logged out
				//login.visible = true;
				username.text = "Not logged in.";
				//logout.visible = false;
				
				// Clear the authentication cookie so we don't auto-login next time
				var facebookCookie:SharedObject = SharedObject.getLocal( "FacebookServiceTest" );
				facebookCookie.clear();
				
				// Display a note about authentication to the user
				Alert.show("The application instance now considers you to be"
					+ " logged out.  However, the application is still"
					+ " authenticated on facebook.com until you remove it from"
					+ " your 'Authentication list' at"
					+ " http://apps.facebook.com/",
					"Logout successful",
					Alert.OK );
					
				viewStack.selectedChild = welcomePanel;
			}
			
		]]>
	</mx:Script>

	 <mx:Panel title="Manual Facebook Test" height="100%" width="100%" 
	     paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10">
		<mx:HBox>
			<mx:Label text="Username:" 	/>
			<mx:Text id="username" text="Not logged in" />
			<mx:Button id="logout" label="Logout" click="processLogout();" />
		</mx:HBox>
		
	    <mx:DividedBox direction="vertical" width="100%" height="100%">

			<mx:ViewStack id="viewStack" borderStyle="solid" width="100%" height="80%">
			
			    <mx:Canvas id="welcomePanel" label="Enter Authentication Token" width="100%" height="100%">
					
					<mx:Form width="100%" height="100%">
			            <mx:FormHeading label="Enter your application api key and secret below:"/>
			
			            <mx:FormItem label="API KEY">
			                <mx:TextInput id="apiKeyTextInput" width="200" text="3a3d6af5971ec898b54af6248b376731" />
			            </mx:FormItem>
			
			            <mx:FormItem label="SECRET">
			                <mx:TextInput id="secretTextInput" width="200" text="71d863de45013ddda8d72dea525e0a1c" />
			            </mx:FormItem>
			
			            <mx:FormItem>
					        <mx:Button label="Login" click="startLoginSequence();"/>
			            </mx:FormItem>
			        </mx:Form>
			
			    </mx:Canvas>
			
			    <mx:Canvas id="authTokenPanel" label="Enter Authentication Token" width="100%" height="100%">
					<mx:Form width="100%" height="100%">
			            <mx:FormHeading label="Enter your authentication token here and click continue:"/>
			            <mx:FormItem label="Auth Token">
			                <mx:TextInput id="authTokenTextInput" width="200"/>
			            </mx:FormItem>
			            <mx:FormItem>
					        <mx:Button label="Continue" click="getSession();"/>
			            </mx:FormItem>
			        </mx:Form>
			    </mx:Canvas>
			
			    <mx:Canvas id="sessionPanel" label="In Session" width="100%" height="100%">
			    
				    <mx:VBox>
						<mx:HBox>
							<mx:ComboBox id="method">
								<mx:dataProvider>
									<mx:Array>
										<mx:String>facebook.fbml.refreshImgSrc</mx:String>
										<mx:String>facebook.fbml.refreshRefUrl</mx:String>
										<mx:String>facebook.fbml.setRefHandle</mx:String>
										<mx:String>facebook.feed.publishStoryToUser</mx:String>
										<mx:String>facebook.feed.publishActionOfUser</mx:String>
										<mx:String>facebook.fql.query</mx:String>
										<mx:String>facebook.friends.areFriends</mx:String>
										<mx:String>facebook.friends.get</mx:String>
										<mx:String>facebook.friends.getAppUsers</mx:String>
										<mx:String>facebook.notifications.get</mx:String>
										<mx:String>facebook.notifications.send</mx:String>
										<mx:String>facebook.notifications.sendRequest</mx:String>
										<mx:String>facebook.profile.setFBML</mx:String>
										<mx:String>facebook.profile.getFBML</mx:String>
										<mx:String>facebook.users.getInfo</mx:String>
										<mx:String>facebook.users.getLoggedInUser</mx:String>
										<mx:String>facebook.events.get</mx:String>
										<mx:String>facebook.events.getMembers</mx:String>
										<mx:String>facebook.groups.get</mx:String>
										<mx:String>facebook.groups.getMembers</mx:String>
										<mx:String>facebook.photos.addTag</mx:String>
										<mx:String>facebook.photos.createAlbum</mx:String>
										<mx:String>facebook.photos.get</mx:String>
										<mx:String>facebook.photos.getAlbums</mx:String>
										<mx:String>facebook.photos.getTags</mx:String>
										<!--mx:String>facebook.photos.upload</mx:String-->
										<mx:String>facebook.users.getInfo</mx:String>
										<mx:String>facebook.users.getLoggedInUser</mx:String>
									</mx:Array>				
								</mx:dataProvider>
							</mx:ComboBox>
			                <mx:TextInput id="extraArgs" width="200"/>
					        <mx:Button label="Call Method" click="invokeFacebookMethod();"/>
				        </mx:HBox>
						<mx:DataGrid id="dgResponse" width="100%" height="100%" dataProvider="{dgData}" />
					</mx:VBox>

			    </mx:Canvas>
			
			</mx:ViewStack>
			    
			<mx:TextArea id="debug" width="100%" height="20%" text="" />

		</mx:DividedBox>
	</mx:Panel>

</mx:Application>
